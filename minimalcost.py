#Problem:
# Given a series of pair numbers, group them together into distinct groups. The numbers are no larger than n.
# Numbers between [1,n] that are not listed in the pairs should be treated as single number groups.
#
# Example 1:
#   n=100
#   pairs = ['19 100', '22 72', '31 47', '59 100', '95 5', '57 12', '8 29', '100 22', '55 73', '90 1', '57 17', '93 13', '3 59', '84 37', '18 21', '47 86', '72 80', '53 99', '98 7', '49 29', '93 60', '78 88', '20 94', '85 36', '83 70', '30 99', '27 97', '7 22', '29 69', '9 17', '68 98', '27 15', '11 39', '58 62', '100 75', '30 17', '34 58', '6 51', '73 17', '97 8', '81 71', '64 49', '50 80', '18 17', '94 73', '20 8', '38 62', '88 39', '27 53', '7 21', '29 4', '38 57', '38 60', '33 32', '87 43', '45 14', '4 87', '95 85', '23 85', '19 39', '75 89', '29 5', '35 54', '57 11', '8 80', '63 39', '32 48', '47 73', '62 99', '22 63', '33 59', '100 88', '64 26', '13 30', '64 41', '89 6', '88 59', '27 85', '39 66', '46 58', '80 23', '69 80', '59 18', '77 18', '94 2', '63 78', '19 72', '61 72', '32 67', '21 49', '26 5', '49 22', '26 6', '22 36', '31 27', '89 70', '41 29', '2 74', '67 3', '51 98', '97 16', '91 79', '91 42', '71 73', '49 88', '3 85', '92 85', '46 44', '45 35', '2 3', '19 99', '1 48', '55 69', '93 50', '63 8', '84 39', '53 74', '31 96', '75 16', '49 52', '82 70', '92 27', '75 3', '56 89', '17 39', '77 43', '72 96', '10 99', '11 75', '51 50', '95 66', '4 57', '23 6', '56 76', '93 48', '6 48', '28 31', '67 43', '98 13', '5 90', '48 94', '42 73', '55 24', '56 84', '17 26', '35 70', '34 52', '100 73', '50 34', '98 48', '72 45', '46 72', '62 100', '39 10', '43 22', '3 16', '21 40', '64 28', '53 18', '24 31', '76 52', '34 48', '67 37', '22 16', '96 23', '2 6', '86 52', '25 8', '65 60', '52 95', '75 86', '63 60', '41 72', '14 40', '62 68', '99 4', '20 41', '40 90', '12 85', '94 37', '64 89', '88 98', '95 33', '20 47', '31 48', '96 79', '88 61', '84 22', '24 12', '39 15', '78 3', '51 89', '38 51', '54 69', '48 88', '42 40', '72 3', '28 66', '21 52', '73 60']
#
# Example 2:
#   n=500
#   pairs = ['377 28', '112 312', '94 437', '215 177', '309 68', '397 193', '386 98', '227 342', '161 1', '2 151', '406 202', '428 379', '218 339', '228 63', '420 374', '90 151', '456 4', '105 65', '13 74', '189 432', '133 308', '399 294', '12 317', '26 368', '347 403', '444 427', '190 179', '317 27', '101 12', '498 235', '110 226', '269 39', '42 355', '436 484', '80 91', '260 499', '165 348', '242 151', '330 83', '401 393', '392 245', '360 38', '138 312', '355 454', '80 29', '104 4', '254 456', '420 476', '112 486', '453 141', '109 409', '21 223', '364 25', '177 369', '398 186', '363 233', '473 412', '365 38', '283 69', '131 386', '436 234', '46 232', '60 123', '246 289', '207 28', '244 138', '266 323', '317 114', '98 121', '391 425', '334 152', '45 169', '372 368', '185 228', '32 184', '458 95', '100 99', '91 447', '16 251', '500 229', '426 199', '294 205', '5 449', '97 268', '42 380', '70 415', '162 351', '463 20', '278 333', '128 65', '409 419', '40 138', '368 55', '138 406', '48 234', '59 359', '33 294', '251 408', '142 288', '390 412', '193 159', '76 428', '280 216', '403 345', '214 84', '163 190', '438 441', '259 205', '225 453', '304 380', '120 67', '193 306', '337 500', '36 425', '414 74', '16 199', '260 45', '63 94', '428 269', '81 387', '141 84', '144 330', '100 112', '305 148', '103 467', '62 71', '23 204', '337 161', '366 386', '410 342', '303 381', '206 21', '390 464', '78 223', '19 438', '336 48', '129 347', '182 208', '185 401', '468 209', '72 25', '267 51', '202 352', '149 88', '398 211', '286 367', '459 476', '88 451', '208 244', '433 332', '330 91', '290 89', '377 100', '85 500', '442 78', '6 252', '256 235', '184 339', '252 210', '174 107', '18 84', '55 241', '36 65', '134 263', '114 185', '249 363', '73 265', '34 56', '402 22', '147 311', '398 466', '478 403', '149 288', '186 265', '132 108', '59 146', '231 413', '164 311', '37 88', '99 452', '474 320', '252 326', '34 121', '485 445', '204 497', '422 435', '93 196', '158 378', '220 93', '161 135', '486 150', '411 281', '492 379', '431 349', '49 14', '299 134', '48 44', '500 269', '201 393', '63 254']
# answer: 402

# Complete the minimalCost function below.
def minimalCost(n, pairs):
    groups = list() # list of set
    pmap = dict() # <num:set>

    # parse pairs and save nearest neighbor lists
    for p in pairs:
        (p1,p2) = p.split()
        p1 = int(p1)
        p2 = int(p2)
        if p1 in pmap:
            pmap[p1].add(p2)
        else:
            pmap[p1] = {p2}
        if p2 in pmap:
            pmap[p2].add(p1)
        else:
            pmap[p2] = {p1}

    # merge pairs into groups
    while (len(pmap) > 0):
        q = list() # queue for BFS
        k = next(iter(pmap)) # get the first key in pmap
        grp = set()
        q.insert(0,k)
        while len(q) > 0:
            k = q.pop()
            if k not in pmap:
                continue
            tmp = pmap.pop(k)
            grp = grp | tmp
            for k in tmp:
                q.insert(0,k)
        groups.append(grp)

    # fill in remainning rods
    for i in range(1, n+1):
        found = False
        for grp in groups:
            if i in grp:
                found = True
                break
        if not found:
            groups.append({i})

    # calc costs
    cost = 0
    for grp in groups:
        cost += math.ceil(math.sqrt(len(grp)))
    
    return cost
