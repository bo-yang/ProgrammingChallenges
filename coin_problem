#!/usr/bin/python

"""
Problem:
Mary has 50 coins, and total to be $1. If a coin is drawn from the set,
what is the probability of drawing a Quarter?

Solution:
Let 
     Xn - has n quarters
     Y - got a quarter
Then the problem of getting a quarter should be P(Y) = sum(n/50 * P(Xn)), 
where
     P(Xn) = (# n quarters) / (# no quarters + # has quarters);
     and n = 0 to 4

The number of has/no quarters can be viewed as a three sum problem, i.e. a + 5b + 10c = N,
where a, b, c are the number of one cent, five cents and one dime respectively, and N 
can be 100(no quarters), 75(one quarter), 50(two quarters), 25(three quarters) and 
0(four quarters). Besides, the constraints to the three sum problem are:
     1. a + b + c = 50 - m, m = 0, 1, 2, 3, 4;
     2. 0 <= c <= b <= a < 50.
"""

import os

""" Find all possible triplets
Inputs:
    data - a list of unique numbers
    s - specified sum of triplets
Outputs:
    tri - list of triplets
"""
def three_sum(data, s):
    tri = []
    data.sort()
    for i in range(0,len(data)-2):
        a = data[i];
        start = i + 1;
        end = len(data) - 1;
        while start < end:
            b = data[start];
            c = data[end];
            if a + b + c == s:
                tmp = sorted([a,b,c])
                if tmp not in tri:
                    tri.append(tmp)
                start += 1
                end -= 1
            elif a + b + c > s:
                end -= 1
            else:
                start += 1
    return tri

""" Find all possible coin combinations
Inputs:
    triplets - all possible triplets
    denom - coin denominations
    m - total number of coins
Output:
    comp - possible combinations
"""
def find_coin_comps(triplets, denom, m):
    comp = []
    for t in triplets:
        for i in range(0, 3):
            for j in range(0, 3):
                if t[i%3]%denom[j%3]==0 and t[(i+1)%3]%denom[(j+1)%3]==0 and t[(i+2)%3]%denom[(j+2)%3]==0 \
                        and t[i%3]/denom[j%3] + t[(i+1)%3]/denom[(j+1)%3] + t[(i+2)%3]/denom[(j+2)%3] == m:
                    tmp = [(denom[j%3],t[i%3]/denom[j%3]), (denom[(j+1)%3],t[(i+1)%3]/denom[(j+1)%3]), \
                            (denom[(j+2)%3],t[(i+2)%3]/denom[(j+2)%3])]
                    tmp.sort(key=lambda tup: tup[0]); # sort by key
                    if tmp not in comp:
                        comp.append(tmp)
    return comp

""" Generate possible values with given coin denominations
Inputs:
    denom - list of coin denominations
    s - specified sum of triplets
    m - total number of coins
Outputs:
    data - a set of numbers
"""
def generate_data(denom, s, m):
    data = set() 
    for d in denom:
        for i in range(1, m+1):
            if d*i <= s:
                data.add(d*i)
            else:
                break
    return data

""" Calculate probability
"""
def calc_prob_one_quarter():
    denom = [1, 5, 10] # coin denominations
    s = 100     # 1 dollar
    m = 50      # total 50 coins
    quarter = 25
    num_total = 0 # possible number of four quarters is 0 
    num_of_quarters = [] # number of no/one/two/three quarters
    for i in range(0, s/quarter+1):
        data = list(generate_data(denom, s-i*quarter, m-i))
        #print "generated data:\n%s\n" %data # FIXME: TEST ONLY
        triplets = three_sum(data, s-i*quarter)
        #print "triplets:\n%s\n" %triplets # FIXME: TEST ONLY
        comp = find_coin_comps(triplets, denom, m-i)
        print "combinations of %d quarter(s):\n%s\n" %(i, comp) # FIXME: TEST ONLY
        num = len(comp)
        num_of_quarters.append(num)
        num_total += num
    num_no_quarter = num_of_quarters[0]
    num_has_quarter = num_total - num_no_quarter

    prob_got_quarter = 0
    print "Total #: %d" % num_total
    print "# no quarter: %d, weight 0" % num_no_quarter
    for i in range(1, s/quarter+1):
        if num_total != 0:
            print "# %d quarter(s): %d, prob %.4f, weight %.4f" % (i, num_of_quarters[i], \
                num_of_quarters[i]/float(num_total), i/float(m))
            prob_got_quarter += i/float(m) * num_of_quarters[i]/float(num_total)
            
    print "Probability of drawing one quarter: %.4f" %prob_got_quarter

if  __name__ =='__main__':
    calc_prob_one_quarter()
